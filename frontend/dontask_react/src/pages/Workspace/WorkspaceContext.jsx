// WorkspaceContext.jsx

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { useParams, useLocation } from "react-router-dom";
import { useToast } from "../../components/Toast/ToastContext";
import { fetchWithAuth, postWithAuth } from "../../service/api.js";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID ---
const generateUniqueId = (prefix = "temp") =>
  `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;

const WorkspaceContext = createContext(null);

export const useWorkspace = () => {
  const context = useContext(WorkspaceContext);
  if (context === undefined) {
    throw new Error(
      "useWorkspace –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ WorkspaceProvider"
    );
  }
  return context;
};

export const WorkspaceProvider = ({ children }) => {
  const { boardId } = useParams();
  const location = useLocation();
  const incomingProjectId = location.state?.projectId;
  const incomingProjectName = location.state?.projectName;
  const showToast = useToast();

  const [workspaceData, setWorkspaceData] = useState(null);
  const [loading, setLoading] = useState(true);

  // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ö–û–õ–û–ù–ö–ò –ò–õ–ò –ó–ê–î–ê–ß–ò) ---
  const updateWorkspaceData = useCallback((newData) => {
    setWorkspaceData((prevData) => {
      if (!prevData) return prevData;

      let newBoardLists = [...(prevData.boardLists || [])];

      // 1. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ö–û–õ–û–ù–ö–ò (–ö–ê–†–¢–û–ß–ö–ò)
      if (newData.newCard) {
        const normalizedNewList = {
          listId: newData.newCard.CardId || generateUniqueId("list"),
          listName: newData.newCard.CardName || "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
          cards: [],
          ...newData.newCard,
        };

        const finalLists = [...newBoardLists, normalizedNewList];

        console.log(
          "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ö–æ–ª–æ–Ω–∫–∞/–°–ø–∏—Å–æ–∫ ('–ö–∞—Ä—Ç–æ—á–∫–∞'):",
          normalizedNewList
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      // 2. –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ó–ê–î–ê–ß–ò (–¢–ê–°–ö–ê)
      if (newData.newTask && newData.listId) {
        const { newTask, listId } = newData;

        const targetListIndex = newBoardLists.findIndex(
          (l) => l.listId === listId
        );

        if (targetListIndex === -1) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å ID: ${listId} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.`
          );
          return prevData;
        }

        const normalizedNewTask = {
          cardId: newTask.CardId || generateUniqueId("task"),
          cardName: newTask.CardName || "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
          ...newTask,
        };

        const targetList = newBoardLists[targetListIndex];

        const updatedList = {
          ...targetList,
          cards: [...(targetList.cards || []), normalizedNewTask],
        };

        const finalLists = [
          ...newBoardLists.slice(0, targetListIndex),
          updatedList,
          ...newBoardLists.slice(targetListIndex + 1),
        ];

        console.log(
          `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫ ${listId}:`,
          normalizedNewTask
        );

        return {
          ...prevData,
          boardLists: finalLists,
        };
      }

      return { ...prevData, ...newData };
    });
  }, []);

  // --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
  const fetchWorkspaceData = useCallback(
    async (id) => {
      if (!id) return;
      setLoading(true);
      setWorkspaceData(null);
      try {
        const data = await fetchWithAuth(`/GetPages/GetWorkSpacePage/${id}`);
        setWorkspaceData(data);
        console.log("–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:", data);
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö WorkSpace:",
          err.response || err.message
        );
        showToast(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          "error"
        );
      } finally {
        setLoading(false);
      }
    },
    [showToast]
  );

  useEffect(() => {
    fetchWorkspaceData(boardId);
  }, [boardId]);

  // --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
  const projectIdFromApi = workspaceData?.projectId;
  const projectId = projectIdFromApi || incomingProjectId;
  const projectNameFromApi = workspaceData?.projectName;
  const projectName =
    projectNameFromApi || incomingProjectName || "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...";
  const boardName = workspaceData?.boardName || "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏...";
  const members = workspaceData?.workSpaceMembers || [];
  const lists = workspaceData?.boardLists || [];

  // --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ö–û–õ–û–ù–ö–ò (–∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ "–∫–∞—Ä—Ç–æ—á–∫–∞") ---
  const createCard = useCallback(async () => {
    if (!projectId || !boardId) {
      console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID –∏–ª–∏ Board ID.");
      showToast(
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏).",
        "error"
      );
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ (–±–µ–∑ /api/, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    const url = `/project/${projectId}/board/${boardId}/Card/CreateCard`;

    const payload = {
      CardName: "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
    };

    try {
      const newCard = await postWithAuth(url, payload, {
        headers: { "Content-Type": "application/json" },
      });

      showToast("–ù–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

      updateWorkspaceData({ newCard: newCard });

      return newCard;
    } catch (err) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏):",
        err.response || err.message
      );
      showToast(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "error"
      );
      throw err;
    }
  }, [projectId, boardId, showToast, updateWorkspaceData]);

  // --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ó–ê–î–ê–ß–ò (Task) –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ ---
  const createTask = useCallback(
    async (listId, taskName) => {
      if (!projectId || !boardId || !listId) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Project ID, Board ID –∏–ª–∏ List ID.", {
          projectId,
          boardId,
          listId,
        });
        showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.", "error");
        return;
      }

      // üîë –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ï–§–ò–ö–° /api/
      // –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API POST /api/project/.../Task/CreateTask
      const baseUrl = `/api/project/${projectId}/board/${boardId}/Task/CreateTask`;

      const payload = {
        ListId: listId,
        CardName: taskName, // –ò–º—è –∑–∞–¥–∞—á–∏
      };

      console.log("--- –û–¢–õ–ê–î–ö–ê TASK/CREATETASK ---");
      console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL:", baseUrl);
      console.log("Payload:", payload);
      console.log("Project ID:", projectId);
      console.log("Board ID:", boardId);
      console.log("List ID:", listId);
      console.log("-------------------------------");

      try {
        const newTask = await postWithAuth(baseUrl, payload, {
          headers: { "Content-Type": "application/json" },
        });

        showToast("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success");

        updateWorkspaceData({ newTask: newTask, listId: listId });

        return newTask;
      } catch (err) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:",
          err.response || err.message
        );
        showToast(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å /api.",
          "error"
        );
        throw err;
      }
    },
    [projectId, boardId, showToast, updateWorkspaceData]
  );

  const contextValue = {
    workspaceData,
    loading,
    projectName,
    boardName,
    members,
    projectId,
    createCard,
    createTask,
    fetchWorkspaceData,
    lists,
  };

  return (
    <WorkspaceContext.Provider value={contextValue}>
      {children}
    </WorkspaceContext.Provider>
  );
};
